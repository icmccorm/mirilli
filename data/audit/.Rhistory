errs_ign = sum(num_errors),
mean_errs_ign = round(mean(num_errors), 1),
stdev_errs_ign = round(sd(num_errors), 1),
max_errs_ign = max(num_errors)
)
count_summary <- count_summary_all %>% inner_join(count_summary_ign, by=("category"))
count_summary$n_crates <- paste(count_summary_all$n_crates_all, "/", count_summary_ign$n_crates_ign)
count_summary$n_errs <- paste(count_summary_all$errs_all, "/", count_summary_ign$errs_ign)
count_summary$mean_errs <- paste(count_summary_all$mean_errs_all, "/", count_summary_ign$mean_errs_ign)
count_summary$stdev_errs <- paste(count_summary_all$stdev_errs_all, "/", count_summary_ign$stdev_errs_ign)
count_summary$max_errs <- paste(count_summary_all$max_errs_all, "/", count_summary_ign$max_errs_ign)
count_summary <- count_summary %>% inner_join(unique_all, by=("category"))
count_summary <- count_summary %>% inner_join(unique_ignored, by=("category"))
count_summary$n_unique <- paste(count_summary$n_unique_all, "/", count_summary$n_unique_ign)
count_summary <- count_summary %>% select(category, n_crates, n_unique, n_errs, mean_errs, stdev_errs, max_errs)
count_summary <- count_summary %>% mutate(category = ifelse(as.character(category) == "rust_functions", "Rust Functions", as.character(category)))
count_summary <- count_summary %>% mutate(category = ifelse(as.character(category) == "foreign_functions", "Foreign Functions", as.character(category)))
count_summary <- count_summary %>% mutate(category = ifelse(as.character(category) == "static_items", "Static Items", as.character(category)))
all_counts <- discriminant_counts %>% group_by(crate_name) %>%
summarize(num_errors = sum(count))
all_counts_ign <- discriminant_counts %>% group_by(crate_name) %>%
filter(ignored == TRUE) %>%
summarize(num_errors = sum(count))
unique_ungrouped <- discriminant_counts %>% select(crate_name, category, discriminant, reason, abi, err_text, ignored) %>%
unique_errors_only %>% nrow
unique_ungrouped_ign <- discriminant_counts %>% select(crate_name, category, discriminant, reason, abi, err_text, ignored) %>%
filter(ignored == TRUE) %>%
unique_errors_only %>% nrow
count_summary[nrow(count_summary) + 1,] <- list(
'All', # Category
paste(all_counts %>% nrow, '/', all_counts_ign %>% nrow), # Crates
paste(unique_ungrouped, '/', unique_ungrouped_ign), # Crates
paste(sum(all_counts$num_errors), '/', sum(all_counts_ign$num_errors)), # Unique Errors
paste(round(mean(all_counts$num_errors), 1), '/', round(mean(all_counts_ign$num_errors), 1)), # Mean
paste(round(sd(all_counts$num_errors), 1), '/', round(sd(all_counts_ign$num_errors), 1)), # St.Dev
paste(max(all_counts$num_errors), '/', max(all_counts_ign$num_errors)) # Max
)
colnames(count_summary) <- c("Category", "# Crates", "# Unique Errors", "Total", "Mean", "St.Dev", "Max")
count_summary %>% select("Category", "# Crates", "# Unique Errors", "Total")
named_counts <- discriminant_counts %>%
inner_join(discriminant_names, by=c("discriminant")) %>% filter(ignored == TRUE)
decls <- named_counts %>% filter(category %in% c("foreign_functions"))
defns <- named_counts %>% filter(category %in% c("rust_functions"))
decls_items <- named_counts %>% filter(category %in% c("static_items"))
discrim_counts <- discriminant_counts %>%
select(crate_name, category, discriminant, reason, abi, err_text, ignored) %>%
unique_errors_only %>%
group_by(reason, discriminant) %>%
summarize(n_unique=n())
decls_items_counts <- decls_items %>%
group_by(reason, discriminant) %>%
summarize(fi_count = sum(count)) %>%
inner_join(reasons, by=c("reason")) %>%
inner_join(discriminant_names, by=c("discriminant"))
decls_counts <- decls %>%
group_by(reason, discriminant) %>%
summarize(ff_count = sum(count)) %>%
inner_join(reasons, by=c("reason")) %>%
inner_join(discriminant_names, by=c("discriminant"))
defns_counts <- defns %>%
group_by(reason, discriminant) %>%
summarize(ef_count = sum(count)) %>%
inner_join(reasons, by=c("reason")) %>%
inner_join(discriminant_names, by=c("discriminant"))
final <- decls_counts %>%
full_join(decls_items_counts, by=c("discriminant","reason")) %>%
full_join(defns_counts, by=c("discriminant", "reason")) %>%
full_join(discrim_counts, by=c("discriminant", "reason")) %>%
mutate(across(where(is.numeric), ~ replace_na(.x, 0))) %>%
ungroup() %>%
select(type_name, reason_name, ff_count, fi_count, ef_count)
final$total_occurrences <- final$ff_count + final$fi_count + final$ef_count
hidden_errors <- final %>% filter(total_occurrences > 0) %>% arrange(type_name)
filtered_presentation <- hidden_errors %>% mutate(reason_name = ifelse(as.character(type_name) == as.character(reason_name), "--", as.character(reason_name)))
filtered_presentation[nrow(filtered_presentation) + 1,] <- list(
'All',
'All',
sum(hidden_errors$ff_count),
sum(hidden_errors$fi_count),
sum(hidden_errors$ef_count),
sum(hidden_errors$total_occurrences)
)
colnames(filtered_presentation) <- c("Type", "Error", "Foreign Functions", "Foreign Items", "Rust Functions", "Total")
filtered_presentation
num_hidden_errors_decls <- sum(decls_counts$ff_count) + sum(decls_items_counts$fi_count)
num_hidden_errors_defns <- sum(defns_counts$ef_count)
num_hidden_errors <- num_hidden_errors_decls + num_hidden_errors_defns
improper_128_bit_foreign <- (decls_counts %>% filter(reason_name == "Num128Bit"))$ff_count + (decls_items_counts %>% filter(reason_name == "Num128Bit"))$fi_count
# large <- function(x){
#   paste0('\textbf{', x, '}')
# }
# addtorow <- list()
# addtorow$pos <- list(0, 0)
# addtorow$command <- c("& & & \\multicolumn{4}{c}{\\# Occurrences} \\\\\n",
# "Category & \\# Crates & \\# Unique & Total & Mean & St.Dev. & Max \\\\\n")
# xt_counts = xtable(
#   count_summary,
#   type = "latex",
#   digits=c(0,0,0,0,0,1,1,0),
# )
# align(xt_counts) <- "llcc|cccc"
# print(xt_counts,
#       include.rownames = FALSE,
#       add.to.row = addtorow,
#       file = "../latex/err_counts.tex",
#       include.colnames = FALSE,
#       sanitize.colnames.function = large,
#       floating=FALSE,
#       latex.environments=NULL
# )
# addtorow <- list()
# addtorow$pos <- list(0, 0)
# addtorow$command <- c("& & & \\multicolumn{4}{c}{\\# Hidden Occurrences} \\\\\n",
# "Error Category & Error & \\# Unique & Foreign Functions & Foreign Items & Rust Functions & Total \\\\\n")
# xt_type_counts <- xtable(
#   filtered,
#   type = "latex",
#   digits=c(0,0,0,0,0,0,0,0),
#   floating=FALSE,
#   latex.environments=NULL
# )
# align(xt_type_counts) <- "lllc|cccc"
# print(xt_type_counts,
#       include.rownames = FALSE,
#       add.to.row = addtorow,
#       file = "../latex/err_type_counts.tex",
#       include.colnames = FALSE,
#       sanitize.colnames.function = large,
#       floating=FALSE,
#       latex.environments=NULL
#     )
final$total_occurrences <- final$ff_count + final$fi_count + final$ef_count
hidden_errors
defns_counts <- defns %>%
group_by(reason, discriminant) %>%
summarize(ef_count = sum(count)) %>%
inner_join(reasons, by=c("reason")) %>%
inner_join(discriminant_names, by=c("discriminant"))
defns_counts <- defns %>%
group_by(reason, discriminant) %>%
summarize(ef_count = sum(count)) %>%
inner_join(reasons, by=c("reason")) %>%
inner_join(discriminant_names, by=c("discriminant"))
defns_counts
decls_counts
decls_items_counts
discrim_counts
decls_counts
decls_counts %>%
full_join(decls_items_counts, by=c("discriminant","reason"))
decls_counts %>%
full_join(decls_items_counts, by=c("discriminant","reason")) %>%
full_join(defns_counts, by=c("discriminant", "reason")) %>%
decls_counts %>%
full_join(decls_items_counts, by=c("discriminant","reason")) %>%
full_join(defns_counts, by=c("discriminant", "reason"))
decls_counts <- decls %>%
group_by(reason, discriminant) %>%
summarize(ff_count = sum(count)) %>%
inner_join(reasons, by=c("reason")) %>%
inner_join(discriminant_names, by=c("discriminant"))
defns_counts <- defns %>%
group_by(reason, discriminant) %>%
summarize(ef_count = sum(count)) %>%
inner_join(reasons, by=c("reason")) %>%
inner_join(discriminant_names, by=c("discriminant"))
discrim_counts <- discriminant_counts %>%
select(crate_name, category, discriminant, reason, abi, err_text, ignored) %>%
unique_errors_only %>%
group_by(reason, discriminant) %>%
summarize(n_unique=n())
decls_items_counts <- decls_items %>%
group_by(reason, discriminant) %>%
summarize(fi_count = sum(count)) %>%
inner_join(reasons, by=c("reason")) %>%
inner_join(discriminant_names, by=c("discriminant"))
named_counts <- discriminant_counts %>%
inner_join(discriminant_names, by=c("discriminant")) %>% filter(ignored == TRUE)
decls <- named_counts %>% filter(category %in% c("foreign_functions"))
defns <- named_counts %>% filter(category %in% c("rust_functions"))
decls_items <- named_counts %>% filter(category %in% c("static_items"))
decls_counts %>%
full_join(decls_items_counts, by=c("discriminant","reason")) %>%
full_join(defns_counts, by=c("discriminant", "reason"))
decls_counts <- decls_counts %>% inner_join(reasons, by=c("reason"))
decls_items_counts <- decls_counts %>% inner_join(reasons, by=c("reason"))
defns_counts <- decls_counts %>% inner_join(reasons, by=c("reason"))
num_hidden_errors_decls <- sum(decls_counts$ff_count) + sum(decls_items_counts$fi_count)
num_hidden_errors_defns <- sum(defns_counts$ef_count)
num_hidden_errors <- num_hidden_errors_decls + num_hidden_errors_defns
improper_128_bit_foreign <- (decls_counts %>%
filter(reason_name == "Num128Bit"))$ff_count + (decls_items_counts %>%  filter(reason_name == "Num128Bit"))$fi_count
decls_counts <- decls_counts %>% inner_join(reasons, by=c("reason"))
decls_items_counts <- decls_items_counts %>% inner_join(reasons, by=c("reason"))
defns_counts <- defns_counts %>% inner_join(reasons, by=c("reason"))
num_hidden_errors_decls <- sum(decls_counts$ff_count) + sum(decls_items_counts$fi_count)
num_hidden_errors_defns <- sum(defns_counts$ef_count)
num_hidden_errors <- num_hidden_errors_decls + num_hidden_errors_defns
improper_128_bit_foreign <- (decls_counts %>% filter(reason_name == "Num128Bit"))$ff_count + (decls_items_counts %>% filter(reason_name == "Num128Bit"))$fi_count
named_counts <- discriminant_counts %>%
inner_join(discriminant_names, by=c("discriminant")) %>% filter(ignored == TRUE)
decls <- named_counts %>% filter(category %in% c("foreign_functions"))
defns <- named_counts %>% filter(category %in% c("rust_functions"))
decls_items <- named_counts %>% filter(category %in% c("static_items"))
discrim_counts <- discriminant_counts %>%
select(crate_name, category, discriminant, reason, abi, err_text, ignored) %>%
unique_errors_only %>%
group_by(reason, discriminant) %>%
summarize(n_unique=n())
decls_items_counts <- decls_items %>%
group_by(reason, discriminant) %>%
summarize(fi_count = sum(count))
decls_counts <- decls %>%
group_by(reason, discriminant) %>%
summarize(ff_count = sum(count))
defns_counts <- defns %>%
group_by(reason, discriminant) %>%
summarize(ef_count = sum(count))
final <- decls_counts %>%
full_join(decls_items_counts, by=c("discriminant","reason")) %>%
full_join(defns_counts, by=c("discriminant", "reason")) %>%
full_join(discrim_counts, by=c("discriminant", "reason")) %>%
inner_join(reasons, by=c("reason")) %>%
inner_join(discriminant_names, by=c("discriminant")) %>%
mutate(across(where(is.numeric), ~ replace_na(.x, 0))) %>%
ungroup() %>%
select(type_name, reason_name, ff_count, fi_count, ef_count)
final$total_occurrences <- final$ff_count + final$fi_count + final$ef_count
hidden_errors <- final %>% filter(total_occurrences > 0) %>% arrange(type_name)
filtered_presentation <- hidden_errors %>% mutate(reason_name = ifelse(as.character(type_name) == as.character(reason_name), "--", as.character(reason_name)))
filtered_presentation[nrow(filtered_presentation) + 1,] <- list(
'All',
'All',
sum(hidden_errors$ff_count),
sum(hidden_errors$fi_count),
sum(hidden_errors$ef_count),
sum(hidden_errors$total_occurrences)
)
colnames(filtered_presentation) <- c("Type", "Error", "Foreign Functions", "Foreign Items", "Rust Functions", "Total")
filtered_presentation
decls_counts <- decls_counts %>% inner_join(reasons, by=c("reason"))
decls_items_counts <- decls_items_counts %>% inner_join(reasons, by=c("reason"))
defns_counts <- defns_counts %>% inner_join(reasons, by=c("reason"))
num_hidden_errors_decls <- sum(decls_counts$ff_count) + sum(decls_items_counts$fi_count)
num_hidden_errors_defns <- sum(defns_counts$ef_count)
num_hidden_errors <- num_hidden_errors_decls + num_hidden_errors_defns
improper_128_bit_foreign <- (decls_counts %>% filter(reason_name == "Num128Bit"))$ff_count + (decls_items_counts %>% filter(reason_name == "Num128Bit"))$fi_count
reasons
decls_counts <- decls %>%
group_by(reason, discriminant) %>%
summarize(ff_count = sum(count)) %>%
inner_join(reasons, by=c("reason")) %>%
inner_join(discriminant_names, by=c("discriminant"))
decls_counts
named_counts <- discriminant_counts %>%
inner_join(discriminant_names, by=c("discriminant")) %>% filter(ignored == TRUE)
decls <- named_counts %>% filter(category %in% c("foreign_functions"))
defns <- named_counts %>% filter(category %in% c("rust_functions"))
decls_items <- named_counts %>% filter(category %in% c("static_items"))
discrim_counts <- discriminant_counts %>%
select(crate_name, category, discriminant, reason, abi, err_text, ignored) %>%
unique_errors_only %>%
group_by(reason, discriminant) %>%
summarize(n_unique=n())
decls_items_counts <- decls_items %>%
group_by(reason, discriminant) %>%
summarize(fi_count = sum(count))
decls_counts <- decls %>%
group_by(reason, discriminant) %>%
summarize(ff_count = sum(count)) %>%
inner_join(reasons, by=c("reason")) %>%
inner_join(discriminant_names, by=c("discriminant"))
defns_counts <- defns %>%
group_by(reason, discriminant) %>%
summarize(ef_count = sum(count))
final <- decls_counts %>%
full_join(decls_items_counts, by=c("discriminant","reason")) %>%
full_join(defns_counts, by=c("discriminant", "reason")) %>%
full_join(discrim_counts, by=c("discriminant", "reason")) %>%
inner_join(reasons, by=c("reason")) %>%
inner_join(discriminant_names, by=c("discriminant")) %>%
mutate(across(where(is.numeric), ~ replace_na(.x, 0))) %>%
ungroup() %>%
select(type_name, reason_name, ff_count, fi_count, ef_count)
decls_counts
decls_counts <- decls %>%
group_by(reason, discriminant) %>%
summarize(ff_count = sum(count)) %>%
inner_join(reasons, by=c("reason")) %>%
inner_join(discriminant_names, by=c("discriminant"))
decls_items_counts <- decls_items %>%
group_by(reason, discriminant) %>%
summarize(fi_count = sum(count)) %>%
inner_join(reasons, by=c("reason")) %>%
inner_join(discriminant_names, by=c("discriminant"))
decls_items_counts
defns_counts <- defns %>%
group_by(reason, discriminant) %>%
summarize(ef_count = sum(count)) %>%
inner_join(reasons, by=c("reason")) %>%
inner_join(discriminant_names, by=c("discriminant"))
named_counts <- discriminant_counts %>%
inner_join(discriminant_names, by=c("discriminant")) %>% filter(ignored == TRUE)
decls <- named_counts %>% filter(category %in% c("foreign_functions"))
defns <- named_counts %>% filter(category %in% c("rust_functions"))
decls_items <- named_counts %>% filter(category %in% c("static_items"))
discrim_counts <- discriminant_counts %>%
select(crate_name, category, discriminant, reason, abi, err_text, ignored) %>%
unique_errors_only %>%
group_by(reason, discriminant) %>%
summarize(n_unique=n())
decls_items_counts <- decls_items %>%
group_by(reason, discriminant) %>%
summarize(fi_count = sum(count)) %>%
inner_join(reasons, by=c("reason")) %>%
inner_join(discriminant_names, by=c("discriminant"))
decls_counts <- decls %>%
group_by(reason, discriminant) %>%
summarize(ff_count = sum(count)) %>%
inner_join(reasons, by=c("reason")) %>%
inner_join(discriminant_names, by=c("discriminant"))
defns_counts <- defns %>%
group_by(reason, discriminant) %>%
summarize(ef_count = sum(count)) %>%
inner_join(reasons, by=c("reason")) %>%
inner_join(discriminant_names, by=c("discriminant"))
final <- decls_counts %>%
full_join(decls_items_counts, by=c("discriminant","reason", "reason_name", "type_name")) %>%
full_join(defns_counts, by=c("discriminant","reason", "reason_name", "type_name")) %>%
full_join(discrim_counts, by=c("discriminant","reason", "reason_name", "type_name")) %>%
mutate(across(where(is.numeric), ~ replace_na(.x, 0))) %>%
ungroup() %>%
select(type_name, reason_name, ff_count, fi_count, ef_count)
decls_counts %>%
full_join(decls_items_counts, by=c("discriminant","reason", "reason_name", "type_name")) %>%
full_join(defns_counts, by=c("discriminant","reason", "reason_name", "type_name"))
full_join(decls_items_counts, by=c("discriminant","reason", "reason_name", "type_name")) %>%
full_join(defns_counts, by=c("discriminant","reason", "reason_name", "type_name")) %>%
full_join(discrim_counts, by=c("discriminant","reason", "reason_name", "type_name"))
decls_counts %>%
full_join(decls_items_counts, by=c("discriminant","reason", "reason_name", "type_name")) %>%
full_join(defns_counts, by=c("discriminant","reason", "reason_name", "type_name")) %>%
full_join(discrim_counts, by=c("discriminant","reason")) %>%
mutate(across(where(is.numeric), ~ replace_na(.x, 0))) %>%
final <- decls_counts %>%
full_join(decls_items_counts, by=c("discriminant","reason", "reason_name", "type_name")) %>%
full_join(defns_counts, by=c("discriminant","reason", "reason_name", "type_name")) %>%
full_join(discrim_counts, by=c("discriminant","reason")) %>%
mutate(across(where(is.numeric), ~ replace_na(.x, 0))) %>%
ungroup() %>%
select(type_name, reason_name, ff_count, fi_count, ef_count)
final <- decls_counts %>%
full_join(decls_items_counts, by=c("discriminant","reason", "reason_name", "type_name")) %>%
full_join(defns_counts, by=c("discriminant","reason", "reason_name", "type_name")) %>%
full_join(discrim_counts, by=c("discriminant","reason")) %>%
mutate(across(where(is.numeric), ~ replace_na(.x, 0))) %>%
ungroup() %>%
select(type_name, reason_name, ff_count, fi_count, ef_count)
named_counts <- discriminant_counts %>%
inner_join(discriminant_names, by=c("discriminant")) %>% filter(ignored == TRUE)
decls <- named_counts %>% filter(category %in% c("foreign_functions"))
defns <- named_counts %>% filter(category %in% c("rust_functions"))
decls_items <- named_counts %>% filter(category %in% c("static_items"))
discrim_counts <- discriminant_counts %>%
select(crate_name, category, discriminant, reason, abi, err_text, ignored) %>%
unique_errors_only %>%
group_by(reason, discriminant) %>%
summarize(n_unique=n())
decls_items_counts <- decls_items %>%
group_by(reason, discriminant) %>%
summarize(fi_count = sum(count)) %>%
inner_join(reasons, by=c("reason")) %>%
inner_join(discriminant_names, by=c("discriminant"))
decls_counts <- decls %>%
group_by(reason, discriminant) %>%
summarize(ff_count = sum(count)) %>%
inner_join(reasons, by=c("reason")) %>%
inner_join(discriminant_names, by=c("discriminant"))
defns_counts <- defns %>%
group_by(reason, discriminant) %>%
summarize(ef_count = sum(count)) %>%
inner_join(reasons, by=c("reason")) %>%
inner_join(discriminant_names, by=c("discriminant"))
final <- decls_counts %>%
full_join(decls_items_counts, by=c("discriminant","reason", "reason_name", "type_name")) %>%
full_join(defns_counts, by=c("discriminant","reason", "reason_name", "type_name")) %>%
full_join(discrim_counts, by=c("discriminant","reason")) %>%
mutate(across(where(is.numeric), ~ replace_na(.x, 0))) %>%
ungroup() %>%
select(type_name, reason_name, ff_count, fi_count, ef_count)
final$total_occurrences <- final$ff_count + final$fi_count + final$ef_count
hidden_errors <- final %>% filter(total_occurrences > 0) %>% arrange(type_name)
filtered_presentation <- hidden_errors %>% mutate(reason_name = ifelse(as.character(type_name) == as.character(reason_name), "--", as.character(reason_name)))
filtered_presentation[nrow(filtered_presentation) + 1,] <- list(
'All',
'All',
sum(hidden_errors$ff_count),
sum(hidden_errors$fi_count),
sum(hidden_errors$ef_count),
sum(hidden_errors$total_occurrences)
)
colnames(filtered_presentation) <- c("Type", "Error", "Foreign Functions", "Foreign Items", "Rust Functions", "Total")
filtered_presentation
num_hidden_errors_decls <- sum(decls_counts$ff_count) + sum(decls_items_counts$fi_count)
num_hidden_errors_defns <- sum(defns_counts$ef_count)
num_hidden_errors <- num_hidden_errors_decls + num_hidden_errors_defns
improper_128_bit_foreign <- (decls_counts %>% filter(reason_name == "Num128Bit"))$ff_count + (decls_items_counts %>% filter(reason_name == "Num128Bit"))$fi_count
struct_fieldless_foreign <- (decls_counts %>% filter(reason_name == "StructFieldless"))$ff_count + (decls_items_counts %>% filter(reason_name == "StructFieldless"))$fi_count
struct_fieldless_foreign
# large <- function(x){
#   paste0('\textbf{', x, '}')
# }
# addtorow <- list()
# addtorow$pos <- list(0, 0)
# addtorow$command <- c("& & & \\multicolumn{4}{c}{\\# Occurrences} \\\\\n",
# "Category & \\# Crates & \\# Unique & Total & Mean & St.Dev. & Max \\\\\n")
# xt_counts = xtable(
#   count_summary,
#   type = "latex",
#   digits=c(0,0,0,0,0,1,1,0),
# )
# align(xt_counts) <- "llcc|cccc"
# print(xt_counts,
#       include.rownames = FALSE,
#       add.to.row = addtorow,
#       file = "../latex/err_counts.tex",
#       include.colnames = FALSE,
#       sanitize.colnames.function = large,
#       floating=FALSE,
#       latex.environments=NULL
# )
# addtorow <- list()
# addtorow$pos <- list(0, 0)
# addtorow$command <- c("& & & \\multicolumn{4}{c}{\\# Hidden Occurrences} \\\\\n",
# "Error Category & Error & \\# Unique & Foreign Functions & Foreign Items & Rust Functions & Total \\\\\n")
# xt_type_counts <- xtable(
#   filtered,
#   type = "latex",
#   digits=c(0,0,0,0,0,0,0,0),
#   floating=FALSE,
#   latex.environments=NULL
# )
# align(xt_type_counts) <- "lllc|cccc"
# print(xt_type_counts,
#       include.rownames = FALSE,
#       add.to.row = addtorow,
#       file = "../latex/err_type_counts.tex",
#       include.colnames = FALSE,
#       sanitize.colnames.function = large,
#       floating=FALSE,
#       latex.environments=NULL
#     )
struct_fieldless_foreign + improper_128_bit_foreign / num_hidden_errors_decls * 100
(struct_fieldless_foreign + improper_128_bit_foreign) / num_hidden_errors_decls * 100
(struct_fieldless_foreign + improper_128_bit_foreign) / num_hidden_errors_decls * 100
struct_fieldless_foreign
improper_128_bit_foreign
improper_128_bit_foreign
improper_128_bit_foreign <- (decls_counts %>% filter(reason_name == "Num128Bit"))$ff_count + (decls_items_counts %>% filter(reason_name == "Num128Bit"))$fi_count
improper_128_bit_foreign
improper_128_bit_foreign <- sum((decls_counts %>% filter(reason_name == "Num128Bit"))$ff_count) + sum((decls_items_counts %>% filter(reason_name == "Num128Bit"))$fi_count)
improper_128_bit_foreign <- sum((decls_counts %>% filter(reason_name == "Num128Bit"))$ff_count) + sum((decls_items_counts %>% filter(reason_name == "Num128Bit"))$fi_count)
improper_128_bit_foreign
struct_fieldless_foreign
improper_128_bit_foreign
num_hidden_errors_decls
r fc((struct_fieldless_foreign + improper_128_bit_foreign) / num_hidden_errors_decls * 100)
`r num_hidden_errors_defns` associated with Rust functions.
# large <- function(x){
#   paste0('\textbf{', x, '}')
# }
# addtorow <- list()
# addtorow$pos <- list(0, 0)
# addtorow$command <- c("& & & \\multicolumn{4}{c}{\\# Occurrences} \\\\\n",
# "Category & \\# Crates & \\# Unique & Total & Mean & St.Dev. & Max \\\\\n")
# xt_counts = xtable(
#   count_summary,
#   type = "latex",
#   digits=c(0,0,0,0,0,1,1,0),
# )
# align(xt_counts) <- "llcc|cccc"
# print(xt_counts,
#       include.rownames = FALSE,
#       add.to.row = addtorow,
#       file = "../latex/err_counts.tex",
#       include.colnames = FALSE,
#       sanitize.colnames.function = large,
#       floating=FALSE,
#       latex.environments=NULL
# )
# addtorow <- list()
# addtorow$pos <- list(0, 0)
# addtorow$command <- c("& & & \\multicolumn{4}{c}{\\# Hidden Occurrences} \\\\\n",
# "Error Category & Error & \\# Unique & Foreign Functions & Foreign Items & Rust Functions & Total \\\\\n")
# xt_type_counts <- xtable(
#   filtered,
#   type = "latex",
#   digits=c(0,0,0,0,0,0,0,0),
#   floating=FALSE,
#   latex.environments=NULL
# )
# align(xt_type_counts) <- "lllc|cccc"
# print(xt_type_counts,
#       include.rownames = FALSE,
#       add.to.row = addtorow,
#       file = "../latex/err_type_counts.tex",
#       include.colnames = FALSE,
#       sanitize.colnames.function = large,
#       floating=FALSE,
#       latex.environments=NULL
#     )
We sample all errors associated with Rust functions for qualitative analysis. However, we use random sampling for errors associated with foreign declarations. This random sampling occurs in across two subpopulations. The first population of errors contains the 91% attributed to 128-bit types and fieldless structs, while the second contains all other errors.
